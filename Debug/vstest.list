
vstest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e98  08002e98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e98  08002e98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000e8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009ce2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000185e  00000000  00000000  00029d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007a8  00000000  00000000  0002b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ce  00000000  00000000  0002bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ab34  00000000  00000000  0002c336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a55a  00000000  00000000  00046e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009c562  00000000  00000000  000513c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001dd4  00000000  00000000  000ed928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000ef6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e40 	.word	0x08002e40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e40 	.word	0x08002e40

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001dc:	4b17      	ldr	r3, [pc, #92]	; (800023c <MX_CAN_Init+0x64>)
 80001de:	4a18      	ldr	r2, [pc, #96]	; (8000240 <MX_CAN_Init+0x68>)
 80001e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80001e2:	4b16      	ldr	r3, [pc, #88]	; (800023c <MX_CAN_Init+0x64>)
 80001e4:	2203      	movs	r2, #3
 80001e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001e8:	4b14      	ldr	r3, [pc, #80]	; (800023c <MX_CAN_Init+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001ee:	4b13      	ldr	r3, [pc, #76]	; (800023c <MX_CAN_Init+0x64>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_CAN_Init+0x64>)
 80001f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_CAN_Init+0x64>)
 80001fe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000202:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <MX_CAN_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800020a:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_CAN_Init+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <MX_CAN_Init+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_CAN_Init+0x64>)
 8000218:	2200      	movs	r2, #0
 800021a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <MX_CAN_Init+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_CAN_Init+0x64>)
 8000224:	2200      	movs	r2, #0
 8000226:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <MX_CAN_Init+0x64>)
 800022a:	f000 faa9 	bl	8000780 <HAL_CAN_Init>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000234:	f000 f917 	bl	8000466 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000028 	.word	0x20000028
 8000240:	40006400 	.word	0x40006400

08000244 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	; 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <HAL_CAN_MspInit+0x80>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d129      	bne.n	80002ba <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <HAL_CAN_MspInit+0x84>)
 8000268:	69db      	ldr	r3, [r3, #28]
 800026a:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <HAL_CAN_MspInit+0x84>)
 800026c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000270:	61d3      	str	r3, [r2, #28]
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <HAL_CAN_MspInit+0x84>)
 8000274:	69db      	ldr	r3, [r3, #28]
 8000276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800027a:	613b      	str	r3, [r7, #16]
 800027c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <HAL_CAN_MspInit+0x84>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <HAL_CAN_MspInit+0x84>)
 8000284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <HAL_CAN_MspInit+0x84>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000296:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800029a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029c:	2302      	movs	r3, #2
 800029e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a4:	2303      	movs	r3, #3
 80002a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80002a8:	2309      	movs	r3, #9
 80002aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	4619      	mov	r1, r3
 80002b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b6:	f000 fd8d 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80002ba:	bf00      	nop
 80002bc:	3728      	adds	r7, #40	; 0x28
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40006400 	.word	0x40006400
 80002c8:	40021000 	.word	0x40021000

080002cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_GPIO_Init+0x44>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <MX_GPIO_Init+0x44>)
 80002d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_GPIO_Init+0x44>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_GPIO_Init+0x44>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <MX_GPIO_Init+0x44>)
 80002f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_GPIO_Init+0x44>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	683b      	ldr	r3, [r7, #0]

}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <prints>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void prints(const char* inputString) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
    // 文字列の長さを計算
    size_t length = strlen(inputString);
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff53 	bl	80001c8 <strlen>
 8000322:	60f8      	str	r0, [r7, #12]
    HAL_UART_Transmit(&huart2, inputString, length, 100);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	b29a      	uxth	r2, r3
 8000328:	2364      	movs	r3, #100	; 0x64
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <prints+0x28>)
 800032e:	f002 f985 	bl	800263c <HAL_UART_Transmit>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000068 	.word	0x20000068

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 f991 	bl	800066c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f84b 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f7ff ffbd 	bl	80002cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000352:	f000 f8ed 	bl	8000530 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000356:	f7ff ff3f 	bl	80001d8 <MX_CAN_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	 HAL_CAN_Start(&hcan);
 800035a:	481f      	ldr	r0, [pc, #124]	; (80003d8 <main+0x98>)
 800035c:	f000 fb0b 	bl	8000976 <HAL_CAN_Start>
	 	 int CANID = 0x555;
 8000360:	f240 5355 	movw	r3, #1365	; 0x555
 8000364:	60fb      	str	r3, [r7, #12]
	 	 uint32_t TxMailbox;
	 	 uint8_t TxData[8];

	 	 if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 0)
 8000366:	481c      	ldr	r0, [pc, #112]	; (80003d8 <main+0x98>)
 8000368:	f000 fc19 	bl	8000b9e <HAL_CAN_GetTxMailboxesFreeLevel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d02d      	beq.n	80003ce <main+0x8e>
	 	 {
	 		 TxHeader.StdId = CANID;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	4a19      	ldr	r2, [pc, #100]	; (80003dc <main+0x9c>)
 8000376:	6013      	str	r3, [r2, #0]
	 		 TxHeader.RTR = CAN_RTR_DATA;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <main+0x9c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
	 		 TxHeader.IDE = CAN_ID_STD;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <main+0x9c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
	 		 TxHeader.DLC = 8;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <main+0x9c>)
 8000386:	2208      	movs	r2, #8
 8000388:	611a      	str	r2, [r3, #16]
	 		 TxHeader.TransmitGlobalTime = DISABLE;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <main+0x9c>)
 800038c:	2200      	movs	r2, #0
 800038e:	751a      	strb	r2, [r3, #20]

       TxData[0]='h';
 8000390:	2368      	movs	r3, #104	; 0x68
 8000392:	703b      	strb	r3, [r7, #0]
       TxData[1]='e';
 8000394:	2365      	movs	r3, #101	; 0x65
 8000396:	707b      	strb	r3, [r7, #1]
       TxData[2]='l';
 8000398:	236c      	movs	r3, #108	; 0x6c
 800039a:	70bb      	strb	r3, [r7, #2]
       TxData[3]='l';
 800039c:	236c      	movs	r3, #108	; 0x6c
 800039e:	70fb      	strb	r3, [r7, #3]
       TxData[4]='o';
 80003a0:	236f      	movs	r3, #111	; 0x6f
 80003a2:	713b      	strb	r3, [r7, #4]
       TxData[5]='s';
 80003a4:	2373      	movs	r3, #115	; 0x73
 80003a6:	717b      	strb	r3, [r7, #5]
       TxData[6]='t';
 80003a8:	2374      	movs	r3, #116	; 0x74
 80003aa:	71bb      	strb	r3, [r7, #6]
       TxData[0]='m';
 80003ac:	236d      	movs	r3, #109	; 0x6d
 80003ae:	703b      	strb	r3, [r7, #0]

       if(HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) != HAL_OK )
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	463a      	mov	r2, r7
 80003b6:	4909      	ldr	r1, [pc, #36]	; (80003dc <main+0x9c>)
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <main+0x98>)
 80003ba:	f000 fb20 	bl	80009fe <HAL_CAN_AddTxMessage>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <main+0x88>
       {
        Error_Handler();
 80003c4:	f000 f84f 	bl	8000466 <Error_Handler>
       }

       prints("CAN Ok!");
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <main+0xa0>)
 80003ca:	f7ff ffa3 	bl	8000314 <prints>

	 	 }
     HAL_Delay(1000);
 80003ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d2:	f000 f9b1 	bl	8000738 <HAL_Delay>
  {
 80003d6:	e7c0      	b.n	800035a <main+0x1a>
 80003d8:	20000028 	.word	0x20000028
 80003dc:	20000050 	.word	0x20000050
 80003e0:	08002e58 	.word	0x08002e58

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b090      	sub	sp, #64	; 0x40
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	2228      	movs	r2, #40	; 0x28
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 fcf7 	bl	8002de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000406:	2302      	movs	r3, #2
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	2301      	movs	r3, #1
 800040c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040e:	2310      	movs	r3, #16
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2302      	movs	r3, #2
 8000414:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000416:	2300      	movs	r3, #0
 8000418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800041a:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000420:	f107 0318 	add.w	r3, r7, #24
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fe47 	bl	80010b8 <HAL_RCC_OscConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000430:	f000 f819 	bl	8000466 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	230f      	movs	r3, #15
 8000436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000438:	2302      	movs	r3, #2
 800043a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2102      	movs	r1, #2
 800044e:	4618      	mov	r0, r3
 8000450:	f001 fe70 	bl	8002134 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800045a:	f000 f804 	bl	8000466 <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3740      	adds	r7, #64	; 0x40
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046a:	b672      	cpsid	i
}
 800046c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046e:	e7fe      	b.n	800046e <Error_Handler+0x8>

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x44>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <HAL_MspInit+0x44>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_MspInit+0x44>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_MspInit+0x44>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_MspInit+0x44>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_MspInit+0x44>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f8f8 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <SystemInit+0x20>)
 8000512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <SystemInit+0x20>)
 8000518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800051c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <MX_USART2_UART_Init+0x5c>)
 8000538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800053c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000574:	f002 f814 	bl	80025a0 <HAL_UART_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057e:	f7ff ff72 	bl	8000466 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000068 	.word	0x20000068
 800058c:	40004400 	.word	0x40004400

08000590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a18      	ldr	r2, [pc, #96]	; (8000610 <HAL_UART_MspInit+0x80>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d129      	bne.n	8000606 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <HAL_UART_MspInit+0x84>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <HAL_UART_MspInit+0x84>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_UART_MspInit+0x84>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_UART_MspInit+0x84>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <HAL_UART_MspInit+0x84>)
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_UART_MspInit+0x84>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80005e2:	f248 0304 	movw	r3, #32772	; 0x8004
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005f4:	2307      	movs	r3, #7
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f000 fbe7 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40004400 	.word	0x40004400
 8000614:	40021000 	.word	0x40021000

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000650 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff ff76 	bl	800050c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f002 fbd7 	bl	8002df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064a:	f7ff fe79 	bl	8000340 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000650:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800065c:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8000660:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000664:	200000f4 	.word	0x200000f4

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>
	...

0800066c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_Init+0x28>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_Init+0x28>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 fb75 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f808 	bl	8000698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000688:	f7ff fef2 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40022000 	.word	0x40022000

08000698 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x54>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x58>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fb7f 	bl	8000dba <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00e      	b.n	80006e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d80a      	bhi.n	80006e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	2200      	movs	r2, #0
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d4:	f000 fb55 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_InitTick+0x5c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008
 800071c:	200000f0 	.word	0x200000f0

08000720 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;  
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000f0 	.word	0x200000f0

08000738 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff ffee 	bl	8000720 <HAL_GetTick>
 8000744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800075e:	bf00      	nop
 8000760:	f7ff ffde 	bl	8000720 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000008 	.word	0x20000008

08000780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e0ed      	b.n	800096e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fd50 	bl	8000244 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007b4:	f7ff ffb4 	bl	8000720 <HAL_GetTick>
 80007b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ba:	e012      	b.n	80007e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007bc:	f7ff ffb0 	bl	8000720 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b0a      	cmp	r3, #10
 80007c8:	d90b      	bls.n	80007e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2205      	movs	r2, #5
 80007da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e0c5      	b.n	800096e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0e5      	beq.n	80007bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f022 0202 	bic.w	r2, r2, #2
 80007fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000800:	f7ff ff8e 	bl	8000720 <HAL_GetTick>
 8000804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000806:	e012      	b.n	800082e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000808:	f7ff ff8a 	bl	8000720 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2b0a      	cmp	r3, #10
 8000814:	d90b      	bls.n	800082e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2205      	movs	r2, #5
 8000826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e09f      	b.n	800096e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e5      	bne.n	8000808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7e1b      	ldrb	r3, [r3, #24]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d108      	bne.n	8000856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e007      	b.n	8000866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7e5b      	ldrb	r3, [r3, #25]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d108      	bne.n	8000880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e007      	b.n	8000890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800088e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7e9b      	ldrb	r3, [r3, #26]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d108      	bne.n	80008aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0220 	orr.w	r2, r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e007      	b.n	80008ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f022 0220 	bic.w	r2, r2, #32
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7edb      	ldrb	r3, [r3, #27]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d108      	bne.n	80008d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0210 	bic.w	r2, r2, #16
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	e007      	b.n	80008e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 0210 	orr.w	r2, r2, #16
 80008e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7f1b      	ldrb	r3, [r3, #28]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d108      	bne.n	80008fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f042 0208 	orr.w	r2, r2, #8
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e007      	b.n	800090e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0208 	bic.w	r2, r2, #8
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7f5b      	ldrb	r3, [r3, #29]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d108      	bne.n	8000928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 0204 	orr.w	r2, r2, #4
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e007      	b.n	8000938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f022 0204 	bic.w	r2, r2, #4
 8000936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	ea42 0103 	orr.w	r1, r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	430a      	orrs	r2, r1
 800095c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b01      	cmp	r3, #1
 8000988:	d12e      	bne.n	80009e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2202      	movs	r2, #2
 800098e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0201 	bic.w	r2, r2, #1
 80009a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009a2:	f7ff febd 	bl	8000720 <HAL_GetTick>
 80009a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009a8:	e012      	b.n	80009d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009aa:	f7ff feb9 	bl	8000720 <HAL_GetTick>
 80009ae:	4602      	mov	r2, r0
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	2b0a      	cmp	r3, #10
 80009b6:	d90b      	bls.n	80009d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2205      	movs	r2, #5
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e012      	b.n	80009f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1e5      	bne.n	80009aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e006      	b.n	80009f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
  }
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b089      	sub	sp, #36	; 0x24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a12:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a1c:	7ffb      	ldrb	r3, [r7, #31]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d003      	beq.n	8000a2a <HAL_CAN_AddTxMessage+0x2c>
 8000a22:	7ffb      	ldrb	r3, [r7, #31]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	f040 80ad 	bne.w	8000b84 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d10a      	bne.n	8000a4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d105      	bne.n	8000a4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f000 8095 	beq.w	8000b74 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	0e1b      	lsrs	r3, r3, #24
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a54:	2201      	movs	r2, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	409a      	lsls	r2, r3
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10d      	bne.n	8000a82 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a70:	68f9      	ldr	r1, [r7, #12]
 8000a72:	6809      	ldr	r1, [r1, #0]
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3318      	adds	r3, #24
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	440b      	add	r3, r1
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	e00f      	b.n	8000aa2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a92:	68f9      	ldr	r1, [r7, #12]
 8000a94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3318      	adds	r3, #24
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	440b      	add	r3, r1
 8000aa0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6819      	ldr	r1, [r3, #0]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3318      	adds	r3, #24
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	7d1b      	ldrb	r3, [r3, #20]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d111      	bne.n	8000ae2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3318      	adds	r3, #24
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	4413      	add	r3, r2
 8000aca:	3304      	adds	r3, #4
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	6811      	ldr	r1, [r2, #0]
 8000ad2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3318      	adds	r3, #24
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	440b      	add	r3, r1
 8000ade:	3304      	adds	r3, #4
 8000ae0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3307      	adds	r3, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	061a      	lsls	r2, r3, #24
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3306      	adds	r3, #6
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	041b      	lsls	r3, r3, #16
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3305      	adds	r3, #5
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	4313      	orrs	r3, r2
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	3204      	adds	r2, #4
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	4610      	mov	r0, r2
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	6811      	ldr	r1, [r2, #0]
 8000b0a:	ea43 0200 	orr.w	r2, r3, r0
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	440b      	add	r3, r1
 8000b14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3303      	adds	r3, #3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	061a      	lsls	r2, r3, #24
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3302      	adds	r3, #2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	4313      	orrs	r3, r2
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	6811      	ldr	r1, [r2, #0]
 8000b40:	ea43 0200 	orr.w	r2, r3, r0
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	440b      	add	r3, r1
 8000b4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3318      	adds	r3, #24
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	4413      	add	r3, r2
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	6811      	ldr	r1, [r2, #0]
 8000b62:	f043 0201 	orr.w	r2, r3, #1
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3318      	adds	r3, #24
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	440b      	add	r3, r1
 8000b6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e00e      	b.n	8000b92 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e006      	b.n	8000b92 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
  }
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bb0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bb2:	7afb      	ldrb	r3, [r7, #11]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d002      	beq.n	8000bbe <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000bb8:	7afb      	ldrb	r3, [r7, #11]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d11d      	bne.n	8000bfa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff47 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff5c 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb0 	bl	8000d28 <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e14e      	b.n	8001082 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8140 	beq.w	800107c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 809a 	beq.w	800107c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a54      	ldr	r2, [pc, #336]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f60:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f8a:	d013      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d00d      	beq.n	8000fb0 <HAL_GPIO_Init+0x1dc>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a45      	ldr	r2, [pc, #276]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d007      	beq.n	8000fac <HAL_GPIO_Init+0x1d8>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d101      	bne.n	8000fa8 <HAL_GPIO_Init+0x1d4>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e006      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc6:	4937      	ldr	r1, [pc, #220]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001022:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104c:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	f47f aea9 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010be:	af00      	add	r7, sp, #0
 80010c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	f001 b823 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 817d 	beq.w	80013ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f4:	4bbc      	ldr	r3, [pc, #752]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d00c      	beq.n	800111a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001100:	4bb9      	ldr	r3, [pc, #740]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d15c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x10e>
 800110c:	4bb6      	ldr	r3, [pc, #728]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d155      	bne.n	80011c6 <HAL_RCC_OscConfig+0x10e>
 800111a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800112e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	095b      	lsrs	r3, r3, #5
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d102      	bne.n	800114c <HAL_RCC_OscConfig+0x94>
 8001146:	4ba8      	ldr	r3, [pc, #672]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	e015      	b.n	8001178 <HAL_RCC_OscConfig+0xc0>
 800114c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001150:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001164:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001168:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001174:	4b9c      	ldr	r3, [pc, #624]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001180:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001184:	fa92 f2a2 	rbit	r2, r2
 8001188:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800118c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	f042 0220 	orr.w	r2, r2, #32
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f002 021f 	and.w	r2, r2, #31
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 811f 	beq.w	80013ec <HAL_RCC_OscConfig+0x334>
 80011ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 8116 	bne.w	80013ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f000 bfaf 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12e>
 80011d8:	4b83      	ldr	r3, [pc, #524]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a82      	ldr	r2, [pc, #520]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e036      	b.n	8001254 <HAL_RCC_OscConfig+0x19c>
 80011e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x158>
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a7b      	ldr	r2, [pc, #492]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80011fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b79      	ldr	r3, [pc, #484]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a78      	ldr	r2, [pc, #480]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e021      	b.n	8001254 <HAL_RCC_OscConfig+0x19c>
 8001210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x184>
 8001222:	4b71      	ldr	r3, [pc, #452]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a70      	ldr	r2, [pc, #448]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b6e      	ldr	r3, [pc, #440]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6d      	ldr	r2, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0x19c>
 800123c:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	f023 020f 	bic.w	r2, r3, #15
 800125c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	495f      	ldr	r1, [pc, #380]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 800126a:	4313      	orrs	r3, r2
 800126c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d059      	beq.n	8001332 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fa4f 	bl	8000720 <HAL_GetTick>
 8001282:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e00a      	b.n	800129e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fa4a 	bl	8000720 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b64      	cmp	r3, #100	; 0x64
 8001296:	d902      	bls.n	800129e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	f000 bf43 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
 800129e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	095b      	lsrs	r3, r3, #5
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d102      	bne.n	80012d0 <HAL_RCC_OscConfig+0x218>
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	e015      	b.n	80012fc <HAL_RCC_OscConfig+0x244>
 80012d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001300:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001304:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001308:	fa92 f2a2 	rbit	r2, r2
 800130c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001310:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001314:	fab2 f282 	clz	r2, r2
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	f042 0220 	orr.w	r2, r2, #32
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0ab      	beq.n	8001288 <HAL_RCC_OscConfig+0x1d0>
 8001330:	e05d      	b.n	80013ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff f9f5 	bl	8000720 <HAL_GetTick>
 8001336:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff f9f0 	bl	8000720 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d902      	bls.n	8001352 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	f000 bee9 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
 8001352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001356:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001366:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <HAL_RCC_OscConfig+0x2cc>
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	e015      	b.n	80013b0 <HAL_RCC_OscConfig+0x2f8>
 8001384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001388:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_RCC_OscConfig+0x330>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013bc:	fa92 f2a2 	rbit	r2, r2
 80013c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013c8:	fab2 f282 	clz	r2, r2
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	f042 0220 	orr.w	r2, r2, #32
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	f002 021f 	and.w	r2, r2, #31
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ab      	bne.n	800133c <HAL_RCC_OscConfig+0x284>
 80013e4:	e003      	b.n	80013ee <HAL_RCC_OscConfig+0x336>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 817d 	beq.w	80016fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001404:	4ba6      	ldr	r3, [pc, #664]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001410:	4ba3      	ldr	r3, [pc, #652]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d172      	bne.n	8001502 <HAL_RCC_OscConfig+0x44a>
 800141c:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d16c      	bne.n	8001502 <HAL_RCC_OscConfig+0x44a>
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800143a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d102      	bne.n	8001458 <HAL_RCC_OscConfig+0x3a0>
 8001452:	4b93      	ldr	r3, [pc, #588]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	e013      	b.n	8001480 <HAL_RCC_OscConfig+0x3c8>
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001470:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	2202      	movs	r2, #2
 8001482:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001486:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001492:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001496:	fab2 f282 	clz	r2, r2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f042 0220 	orr.w	r2, r2, #32
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f002 021f 	and.w	r2, r2, #31
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <HAL_RCC_OscConfig+0x410>
 80014b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d002      	beq.n	80014c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f000 be2e 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b75      	ldr	r3, [pc, #468]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	21f8      	movs	r1, #248	; 0xf8
 80014de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014e6:	fa91 f1a1 	rbit	r1, r1
 80014ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014f2:	fab1 f181 	clz	r1, r1
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	408b      	lsls	r3, r1
 80014fa:	4969      	ldr	r1, [pc, #420]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001500:	e0fd      	b.n	80016fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8088 	beq.w	8001624 <HAL_RCC_OscConfig+0x56c>
 8001514:	2301      	movs	r3, #1
 8001516:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001526:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001534:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	461a      	mov	r2, r3
 800153c:	2301      	movs	r3, #1
 800153e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff f8ee 	bl	8000720 <HAL_GetTick>
 8001544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff f8e9 	bl	8000720 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d902      	bls.n	8001560 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	f000 bde2 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001572:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	fab3 f383 	clz	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	095b      	lsrs	r3, r3, #5
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x4d8>
 800158a:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	e013      	b.n	80015b8 <HAL_RCC_OscConfig+0x500>
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800159a:	fa93 f3a3 	rbit	r3, r3
 800159e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	2202      	movs	r2, #2
 80015ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015c2:	fa92 f2a2 	rbit	r2, r2
 80015c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015ce:	fab2 f282 	clz	r2, r2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f042 0220 	orr.w	r2, r2, #32
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f002 021f 	and.w	r2, r2, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0af      	beq.n	800154a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	21f8      	movs	r1, #248	; 0xf8
 8001600:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001608:	fa91 f1a1 	rbit	r1, r1
 800160c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001610:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001614:	fab1 f181 	clz	r1, r1
 8001618:	b2c9      	uxtb	r1, r1
 800161a:	408b      	lsls	r3, r1
 800161c:	4920      	ldr	r1, [pc, #128]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
 8001622:	e06c      	b.n	80016fe <HAL_RCC_OscConfig+0x646>
 8001624:	2301      	movs	r3, #1
 8001626:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001636:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	461a      	mov	r2, r3
 800164c:	2300      	movs	r3, #0
 800164e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff f866 	bl	8000720 <HAL_GetTick>
 8001654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff f861 	bl	8000720 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d902      	bls.n	8001670 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	f000 bd5a 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d104      	bne.n	80016a4 <HAL_RCC_OscConfig+0x5ec>
 800169a:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <HAL_RCC_OscConfig+0x5e8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	e015      	b.n	80016cc <HAL_RCC_OscConfig+0x614>
 80016a0:	40021000 	.word	0x40021000
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016c8:	4bc8      	ldr	r3, [pc, #800]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2202      	movs	r2, #2
 80016ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016d6:	fa92 f2a2 	rbit	r2, r2
 80016da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016e2:	fab2 f282 	clz	r2, r2
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	f042 0220 	orr.w	r2, r2, #32
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f002 021f 	and.w	r2, r2, #31
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f202 	lsl.w	r2, r1, r2
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ad      	bne.n	800165a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8110 	beq.w	8001934 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d079      	beq.n	8001818 <HAL_RCC_OscConfig+0x760>
 8001724:	2301      	movs	r3, #1
 8001726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	4bab      	ldr	r3, [pc, #684]	; (80019f0 <HAL_RCC_OscConfig+0x938>)
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	461a      	mov	r2, r3
 800174a:	2301      	movs	r3, #1
 800174c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7fe ffe7 	bl	8000720 <HAL_GetTick>
 8001752:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001758:	f7fe ffe2 	bl	8000720 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d902      	bls.n	800176e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	f000 bcdb 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fa93 f2a3 	rbit	r2, r3
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c8:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 80017ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017d4:	2102      	movs	r1, #2
 80017d6:	6019      	str	r1, [r3, #0]
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	fa93 f1a3 	rbit	r1, r3
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017ee:	6019      	str	r1, [r3, #0]
  return result;
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0a0      	beq.n	8001758 <HAL_RCC_OscConfig+0x6a0>
 8001816:	e08d      	b.n	8001934 <HAL_RCC_OscConfig+0x87c>
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800183a:	601a      	str	r2, [r3, #0]
  return result;
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001844:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x938>)
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	461a      	mov	r2, r3
 8001856:	2300      	movs	r3, #0
 8001858:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7fe ff61 	bl	8000720 <HAL_GetTick>
 800185e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001862:	e00a      	b.n	800187a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001864:	f7fe ff5c 	bl	8000720 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d902      	bls.n	800187a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	f000 bc55 	b.w	8002124 <HAL_RCC_OscConfig+0x106c>
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001882:	2202      	movs	r2, #2
 8001884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018a6:	2202      	movs	r2, #2
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 80018e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018f2:	2102      	movs	r1, #2
 80018f4:	6019      	str	r1, [r3, #0]
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f1a3 	rbit	r1, r3
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800190c:	6019      	str	r1, [r3, #0]
  return result;
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d197      	bne.n	8001864 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 81a1 	beq.w	8001c8c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d116      	bne.n	800198a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 8001962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001966:	61d3      	str	r3, [r2, #28]
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001982:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_RCC_OscConfig+0x93c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11a      	bne.n	80019cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_RCC_OscConfig+0x93c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <HAL_RCC_OscConfig+0x93c>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7fe febd 	bl	8000720 <HAL_GetTick>
 80019a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ac:	f7fe feb8 	bl	8000720 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e3b1      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_OscConfig+0x93c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ef      	beq.n	80019ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10d      	bne.n	80019f8 <HAL_RCC_OscConfig+0x940>
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a02      	ldr	r2, [pc, #8]	; (80019ec <HAL_RCC_OscConfig+0x934>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e03c      	b.n	8001a64 <HAL_RCC_OscConfig+0x9ac>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	10908120 	.word	0x10908120
 80019f4:	40007000 	.word	0x40007000
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x96a>
 8001a08:	4bc1      	ldr	r3, [pc, #772]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4ac0      	ldr	r2, [pc, #768]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	4bbe      	ldr	r3, [pc, #760]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4abd      	ldr	r2, [pc, #756]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a1a:	f023 0304 	bic.w	r3, r3, #4
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	e020      	b.n	8001a64 <HAL_RCC_OscConfig+0x9ac>
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x994>
 8001a32:	4bb7      	ldr	r3, [pc, #732]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4ab6      	ldr	r2, [pc, #728]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4bb4      	ldr	r3, [pc, #720]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4ab3      	ldr	r2, [pc, #716]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0x9ac>
 8001a4c:	4bb0      	ldr	r3, [pc, #704]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4aaf      	ldr	r2, [pc, #700]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	4bad      	ldr	r3, [pc, #692]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4aac      	ldr	r2, [pc, #688]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8081 	beq.w	8001b78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7fe fe53 	bl	8000720 <HAL_GetTick>
 8001a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7fe fe4e 	bl	8000720 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e345      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ade:	601a      	str	r2, [r3, #0]
  return result;
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ae8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0xa4c>
 8001afe:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0xa74>
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4b79      	ldr	r3, [pc, #484]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b34:	2102      	movs	r1, #2
 8001b36:	6011      	str	r1, [r2, #0]
 8001b38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fa92 f1a2 	rbit	r1, r2
 8001b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b4e:	6011      	str	r1, [r2, #0]
  return result;
 8001b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b54:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	fab2 f282 	clz	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f002 021f 	and.w	r2, r2, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d084      	beq.n	8001a80 <HAL_RCC_OscConfig+0x9c8>
 8001b76:	e07f      	b.n	8001c78 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7fe fdd2 	bl	8000720 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7fe fdcd 	bl	8000720 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e2c4      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001be0:	601a      	str	r2, [r3, #0]
  return result;
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d102      	bne.n	8001c06 <HAL_RCC_OscConfig+0xb4e>
 8001c00:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	e013      	b.n	8001c2e <HAL_RCC_OscConfig+0xb76>
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c0e:	2202      	movs	r2, #2
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c36:	2102      	movs	r1, #2
 8001c38:	6011      	str	r1, [r2, #0]
 8001c3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	fa92 f1a2 	rbit	r1, r2
 8001c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c50:	6011      	str	r1, [r2, #0]
  return result;
 8001c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d184      	bne.n	8001b82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8242 	beq.w	8002122 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_RCC_OscConfig+0xc58>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	f000 8213 	beq.w	80020d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	f040 8162 	bne.w	8001f82 <HAL_RCC_OscConfig+0xeca>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ce2:	601a      	str	r2, [r3, #0]
  return result;
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2300      	movs	r3, #0
 8001d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe fd0c 	bl	8000720 <HAL_GetTick>
 8001d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	e00c      	b.n	8001d28 <HAL_RCC_OscConfig+0xc70>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe fd04 	bl	8000720 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1fd      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d4c:	601a      	str	r2, [r3, #0]
  return result;
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d102      	bne.n	8001d72 <HAL_RCC_OscConfig+0xcba>
 8001d6c:	4bb0      	ldr	r3, [pc, #704]	; (8002030 <HAL_RCC_OscConfig+0xf78>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	e027      	b.n	8001dc2 <HAL_RCC_OscConfig+0xd0a>
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	4b9c      	ldr	r3, [pc, #624]	; (8002030 <HAL_RCC_OscConfig+0xf78>)
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dce:	6011      	str	r1, [r2, #0]
 8001dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	fa92 f1a2 	rbit	r1, r2
 8001dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001de6:	6011      	str	r1, [r2, #0]
  return result;
 8001de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	fab2 f282 	clz	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f042 0220 	orr.w	r2, r2, #32
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f002 021f 	and.w	r2, r2, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d182      	bne.n	8001d14 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0xf78>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	497f      	ldr	r1, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0xf78>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fa93 f2a3 	rbit	r2, r3
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e5a:	601a      	str	r2, [r3, #0]
  return result;
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e64:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	461a      	mov	r2, r3
 8001e78:	2301      	movs	r3, #1
 8001e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fc50 	bl	8000720 <HAL_GetTick>
 8001e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e86:	f7fe fc4b 	bl	8000720 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e144      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ebe:	601a      	str	r2, [r3, #0]
  return result;
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ec8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xe2c>
 8001ede:	4b54      	ldr	r3, [pc, #336]	; (8002030 <HAL_RCC_OscConfig+0xf78>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e027      	b.n	8001f34 <HAL_RCC_OscConfig+0xe7c>
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_RCC_OscConfig+0xf78>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f38:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f40:	6011      	str	r1, [r2, #0]
 8001f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f46:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fa92 f1a2 	rbit	r1, r2
 8001f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f58:	6011      	str	r1, [r2, #0]
  return result;
 8001f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d082      	beq.n	8001e86 <HAL_RCC_OscConfig+0xdce>
 8001f80:	e0cf      	b.n	8002122 <HAL_RCC_OscConfig+0x106a>
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f94:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fa93 f2a3 	rbit	r2, r3
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fa6:	601a      	str	r2, [r3, #0]
  return result;
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fb0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fbaa 	bl	8000720 <HAL_GetTick>
 8001fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7fe fba5 	bl	8000720 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e09e      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800200a:	601a      	str	r2, [r3, #0]
  return result;
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002014:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d104      	bne.n	8002034 <HAL_RCC_OscConfig+0xf7c>
 800202a:	4b01      	ldr	r3, [pc, #4]	; (8002030 <HAL_RCC_OscConfig+0xf78>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	e029      	b.n	8002084 <HAL_RCC_OscConfig+0xfcc>
 8002030:	40021000 	.word	0x40021000
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800203c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	fa93 f2a3 	rbit	r2, r3
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_OscConfig+0x1078>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002088:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800208c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002090:	6011      	str	r1, [r2, #0]
 8002092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002096:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	fa92 f1a2 	rbit	r1, r2
 80020a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020a8:	6011      	str	r1, [r2, #0]
  return result;
 80020aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f042 0220 	orr.w	r2, r2, #32
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f002 021f 	and.w	r2, r2, #31
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d180      	bne.n	8001fd2 <HAL_RCC_OscConfig+0xf1a>
 80020d0:	e027      	b.n	8002122 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e01e      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_OscConfig+0x1078>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	429a      	cmp	r2, r3
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002106:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800210a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b09e      	sub	sp, #120	; 0x78
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e162      	b.n	8002412 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b90      	ldr	r3, [pc, #576]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d910      	bls.n	800217c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b8d      	ldr	r3, [pc, #564]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	498b      	ldr	r1, [pc, #556]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b89      	ldr	r3, [pc, #548]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e14a      	b.n	8002412 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	497f      	ldr	r1, [pc, #508]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80dc 	beq.w	8002360 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d13c      	bne.n	800222a <HAL_RCC_ClockConfig+0xf6>
 80021b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <HAL_RCC_ClockConfig+0xa6>
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	e00f      	b.n	80021fa <HAL_RCC_ClockConfig+0xc6>
 80021da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	667b      	str	r3, [r7, #100]	; 0x64
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	663b      	str	r3, [r7, #96]	; 0x60
 80021ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d17b      	bne.n	800231e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0f3      	b.n	8002412 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d13c      	bne.n	80022ac <HAL_RCC_ClockConfig+0x178>
 8002232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002236:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_RCC_ClockConfig+0x128>
 8002256:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	e00f      	b.n	800227c <HAL_RCC_ClockConfig+0x148>
 800225c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002260:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	647b      	str	r3, [r7, #68]	; 0x44
 800226a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226e:	643b      	str	r3, [r7, #64]	; 0x40
 8002270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002280:	63ba      	str	r2, [r7, #56]	; 0x38
 8002282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800228a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	f042 0220 	orr.w	r2, r2, #32
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f002 021f 	and.w	r2, r2, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d13a      	bne.n	800231e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b2      	b.n	8002412 <HAL_RCC_ClockConfig+0x2de>
 80022ac:	2302      	movs	r3, #2
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x1a0>
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e00d      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1bc>
 80022d4:	2302      	movs	r3, #2
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2202      	movs	r2, #2
 80022f2:	61ba      	str	r2, [r7, #24]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	fa92 f2a2 	rbit	r2, r2
 80022fa:	617a      	str	r2, [r7, #20]
  return result;
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	fab2 f282 	clz	r2, r2
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f042 0220 	orr.w	r2, r2, #32
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f002 021f 	and.w	r2, r2, #31
 800230e:	2101      	movs	r1, #1
 8002310:	fa01 f202 	lsl.w	r2, r1, r2
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e079      	b.n	8002412 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	491a      	ldr	r1, [pc, #104]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002330:	f7fe f9f6 	bl	8000720 <HAL_GetTick>
 8002334:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7fe f9f2 	bl	8000720 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e061      	b.n	8002412 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_ClockConfig+0x260>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d214      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4906      	ldr	r1, [pc, #24]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCC_ClockConfig+0x25c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e040      	b.n	8002412 <HAL_RCC_ClockConfig+0x2de>
 8002390:	40022000 	.word	0x40022000
 8002394:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCC_ClockConfig+0x2e8>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	491a      	ldr	r1, [pc, #104]	; (800241c <HAL_RCC_ClockConfig+0x2e8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x2e8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4912      	ldr	r1, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x2e8>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023d6:	f000 f829 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023da:	4601      	mov	r1, r0
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_ClockConfig+0x2e8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e4:	22f0      	movs	r2, #240	; 0xf0
 80023e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	fa92 f2a2 	rbit	r2, r2
 80023ee:	60fa      	str	r2, [r7, #12]
  return result;
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	fab2 f282 	clz	r2, r2
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	40d3      	lsrs	r3, r2
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x2ec>)
 80023fc:	5cd3      	ldrb	r3, [r2, r3]
 80023fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_RCC_ClockConfig+0x2f0>)
 8002404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_RCC_ClockConfig+0x2f4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f944 	bl	8000698 <HAL_InitTick>
  
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3778      	adds	r7, #120	; 0x78
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	08002e60 	.word	0x08002e60
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b08b      	sub	sp, #44	; 0x2c
 8002430:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x30>
 8002456:	2b08      	cmp	r3, #8
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x36>
 800245a:	e03c      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800245e:	623b      	str	r3, [r7, #32]
      break;
 8002460:	e03c      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002468:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800246c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	607a      	str	r2, [r7, #4]
  return result;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	40d3      	lsrs	r3, r2
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	220f      	movs	r2, #15
 8002490:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	fa92 f2a2 	rbit	r2, r2
 8002498:	60fa      	str	r2, [r7, #12]
  return result;
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	fab2 f282 	clz	r2, r2
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	40d3      	lsrs	r3, r2
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b4:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	623b      	str	r3, [r7, #32]
      break;
 80024d4:	e002      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024d8:	623b      	str	r3, [r7, #32]
      break;
 80024da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	372c      	adds	r7, #44	; 0x2c
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	08002e78 	.word	0x08002e78
 80024f8:	08002e88 	.word	0x08002e88
 80024fc:	003d0900 	.word	0x003d0900

08002500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_RCC_GetHCLKFreq+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000000 	.word	0x20000000

08002518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800251e:	f7ff ffef 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800252c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002530:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	603a      	str	r2, [r7, #0]
  return result;
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	40d3      	lsrs	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	08002e70 	.word	0x08002e70

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002562:	f7ff ffcd 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002566:	4601      	mov	r1, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002570:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002574:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	fa92 f2a2 	rbit	r2, r2
 800257c:	603a      	str	r2, [r7, #0]
  return result;
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	fab2 f282 	clz	r2, r2
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	40d3      	lsrs	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x40>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08002e70 	.word	0x08002e70

080025a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e040      	b.n	8002634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fd ffe4 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8b6 	bl	8002750 <UART_SetConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e022      	b.n	8002634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f9e0 	bl	80029bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800260a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800261a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fa67 	bl	8002b00 <UART_CheckIdleState>
 8002632:	4603      	mov	r3, r0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002650:	2b20      	cmp	r3, #32
 8002652:	d178      	bne.n	8002746 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Transmit+0x24>
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e071      	b.n	8002748 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2221      	movs	r2, #33	; 0x21
 8002670:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002672:	f7fe f855 	bl	8000720 <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002690:	d108      	bne.n	80026a4 <HAL_UART_Transmit+0x68>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	e003      	b.n	80026ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026ac:	e030      	b.n	8002710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fac9 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e03c      	b.n	8002748 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	881a      	ldrh	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e0:	b292      	uxth	r2, r2
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	3302      	adds	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e008      	b.n	80026fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b292      	uxth	r2, r2
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1c8      	bne.n	80026ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2200      	movs	r2, #0
 8002724:	2140      	movs	r1, #64	; 0x40
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fa92 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e005      	b.n	8002748 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002746:	2302      	movs	r3, #2
  }
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b8a      	ldr	r3, [pc, #552]	; (80029a4 <UART_SetConfig+0x254>)
 800277c:	4013      	ands	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	6979      	ldr	r1, [r7, #20]
 8002784:	430b      	orrs	r3, r1
 8002786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a78      	ldr	r2, [pc, #480]	; (80029a8 <UART_SetConfig+0x258>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d120      	bne.n	800280e <UART_SetConfig+0xbe>
 80027cc:	4b77      	ldr	r3, [pc, #476]	; (80029ac <UART_SetConfig+0x25c>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d817      	bhi.n	8002808 <UART_SetConfig+0xb8>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <UART_SetConfig+0x90>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	080027fd 	.word	0x080027fd
 80027e8:	08002803 	.word	0x08002803
 80027ec:	080027f7 	.word	0x080027f7
 80027f0:	2300      	movs	r3, #0
 80027f2:	77fb      	strb	r3, [r7, #31]
 80027f4:	e01d      	b.n	8002832 <UART_SetConfig+0xe2>
 80027f6:	2302      	movs	r3, #2
 80027f8:	77fb      	strb	r3, [r7, #31]
 80027fa:	e01a      	b.n	8002832 <UART_SetConfig+0xe2>
 80027fc:	2304      	movs	r3, #4
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e017      	b.n	8002832 <UART_SetConfig+0xe2>
 8002802:	2308      	movs	r3, #8
 8002804:	77fb      	strb	r3, [r7, #31]
 8002806:	e014      	b.n	8002832 <UART_SetConfig+0xe2>
 8002808:	2310      	movs	r3, #16
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e011      	b.n	8002832 <UART_SetConfig+0xe2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a67      	ldr	r2, [pc, #412]	; (80029b0 <UART_SetConfig+0x260>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d102      	bne.n	800281e <UART_SetConfig+0xce>
 8002818:	2300      	movs	r3, #0
 800281a:	77fb      	strb	r3, [r7, #31]
 800281c:	e009      	b.n	8002832 <UART_SetConfig+0xe2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a64      	ldr	r2, [pc, #400]	; (80029b4 <UART_SetConfig+0x264>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d102      	bne.n	800282e <UART_SetConfig+0xde>
 8002828:	2300      	movs	r3, #0
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e001      	b.n	8002832 <UART_SetConfig+0xe2>
 800282e:	2310      	movs	r3, #16
 8002830:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283a:	d15a      	bne.n	80028f2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800283c:	7ffb      	ldrb	r3, [r7, #31]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d827      	bhi.n	8002892 <UART_SetConfig+0x142>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <UART_SetConfig+0xf8>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	0800286d 	.word	0x0800286d
 800284c:	08002875 	.word	0x08002875
 8002850:	0800287d 	.word	0x0800287d
 8002854:	08002893 	.word	0x08002893
 8002858:	08002883 	.word	0x08002883
 800285c:	08002893 	.word	0x08002893
 8002860:	08002893 	.word	0x08002893
 8002864:	08002893 	.word	0x08002893
 8002868:	0800288b 	.word	0x0800288b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800286c:	f7ff fe54 	bl	8002518 <HAL_RCC_GetPCLK1Freq>
 8002870:	61b8      	str	r0, [r7, #24]
        break;
 8002872:	e013      	b.n	800289c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002874:	f7ff fe72 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 8002878:	61b8      	str	r0, [r7, #24]
        break;
 800287a:	e00f      	b.n	800289c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800287c:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <UART_SetConfig+0x268>)
 800287e:	61bb      	str	r3, [r7, #24]
        break;
 8002880:	e00c      	b.n	800289c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002882:	f7ff fdd3 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002886:	61b8      	str	r0, [r7, #24]
        break;
 8002888:	e008      	b.n	800289c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800288a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288e:	61bb      	str	r3, [r7, #24]
        break;
 8002890:	e004      	b.n	800289c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	77bb      	strb	r3, [r7, #30]
        break;
 800289a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d074      	beq.n	800298c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	005a      	lsls	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	441a      	add	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	d916      	bls.n	80028ec <UART_SetConfig+0x19c>
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d212      	bcs.n	80028ec <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f023 030f 	bic.w	r3, r3, #15
 80028ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	b29a      	uxth	r2, r3
 80028dc:	89fb      	ldrh	r3, [r7, #14]
 80028de:	4313      	orrs	r3, r2
 80028e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	89fa      	ldrh	r2, [r7, #14]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e04f      	b.n	800298c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	77bb      	strb	r3, [r7, #30]
 80028f0:	e04c      	b.n	800298c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d828      	bhi.n	800294a <UART_SetConfig+0x1fa>
 80028f8:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <UART_SetConfig+0x1b0>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002925 	.word	0x08002925
 8002904:	0800292d 	.word	0x0800292d
 8002908:	08002935 	.word	0x08002935
 800290c:	0800294b 	.word	0x0800294b
 8002910:	0800293b 	.word	0x0800293b
 8002914:	0800294b 	.word	0x0800294b
 8002918:	0800294b 	.word	0x0800294b
 800291c:	0800294b 	.word	0x0800294b
 8002920:	08002943 	.word	0x08002943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002924:	f7ff fdf8 	bl	8002518 <HAL_RCC_GetPCLK1Freq>
 8002928:	61b8      	str	r0, [r7, #24]
        break;
 800292a:	e013      	b.n	8002954 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800292c:	f7ff fe16 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 8002930:	61b8      	str	r0, [r7, #24]
        break;
 8002932:	e00f      	b.n	8002954 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <UART_SetConfig+0x268>)
 8002936:	61bb      	str	r3, [r7, #24]
        break;
 8002938:	e00c      	b.n	8002954 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800293a:	f7ff fd77 	bl	800242c <HAL_RCC_GetSysClockFreq>
 800293e:	61b8      	str	r0, [r7, #24]
        break;
 8002940:	e008      	b.n	8002954 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002946:	61bb      	str	r3, [r7, #24]
        break;
 8002948:	e004      	b.n	8002954 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	77bb      	strb	r3, [r7, #30]
        break;
 8002952:	bf00      	nop
    }

    if (pclk != 0U)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d018      	beq.n	800298c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	085a      	lsrs	r2, r3, #1
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	441a      	add	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b0f      	cmp	r3, #15
 8002972:	d909      	bls.n	8002988 <UART_SetConfig+0x238>
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297a:	d205      	bcs.n	8002988 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	e001      	b.n	800298c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002998:	7fbb      	ldrb	r3, [r7, #30]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	efff69f3 	.word	0xefff69f3
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40004800 	.word	0x40004800
 80029b8:	007a1200 	.word	0x007a1200

080029bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01a      	beq.n	8002ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aba:	d10a      	bne.n	8002ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
  }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b098      	sub	sp, #96	; 0x60
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b10:	f7fd fe06 	bl	8000720 <HAL_GetTick>
 8002b14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d12e      	bne.n	8002b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f88c 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d021      	beq.n	8002b82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	e853 3f00 	ldrex	r3, [r3]
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b52:	653b      	str	r3, [r7, #80]	; 0x50
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e6      	bne.n	8002b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e062      	b.n	8002c48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d149      	bne.n	8002c24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f856 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d03c      	beq.n	8002c24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e6      	bne.n	8002baa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3308      	adds	r3, #8
 8002be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bfc:	61fa      	str	r2, [r7, #28]
 8002bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c00:	69b9      	ldr	r1, [r7, #24]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	e841 2300 	strex	r3, r2, [r1]
 8002c08:	617b      	str	r3, [r7, #20]
   return(result);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e5      	bne.n	8002bdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e011      	b.n	8002c48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3758      	adds	r7, #88	; 0x58
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c60:	e049      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c68:	d045      	beq.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fd fd59 	bl	8000720 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e048      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d031      	beq.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d110      	bne.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f838 	bl	8002d1e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e029      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd0:	d111      	bne.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f81e 	bl	8002d1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e00f      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d0a6      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b095      	sub	sp, #84	; 0x54
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d44:	643b      	str	r3, [r7, #64]	; 0x40
 8002d46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e6      	bne.n	8002d26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3308      	adds	r3, #8
 8002d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e5      	bne.n	8002d58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d118      	bne.n	8002dc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f023 0310 	bic.w	r3, r3, #16
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e6      	bne.n	8002d94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002dda:	bf00      	nop
 8002ddc:	3754      	adds	r7, #84	; 0x54
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <memset>:
 8002de6:	4402      	add	r2, r0
 8002de8:	4603      	mov	r3, r0
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d100      	bne.n	8002df0 <memset+0xa>
 8002dee:	4770      	bx	lr
 8002df0:	f803 1b01 	strb.w	r1, [r3], #1
 8002df4:	e7f9      	b.n	8002dea <memset+0x4>
	...

08002df8 <__libc_init_array>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4d0d      	ldr	r5, [pc, #52]	; (8002e30 <__libc_init_array+0x38>)
 8002dfc:	4c0d      	ldr	r4, [pc, #52]	; (8002e34 <__libc_init_array+0x3c>)
 8002dfe:	1b64      	subs	r4, r4, r5
 8002e00:	10a4      	asrs	r4, r4, #2
 8002e02:	2600      	movs	r6, #0
 8002e04:	42a6      	cmp	r6, r4
 8002e06:	d109      	bne.n	8002e1c <__libc_init_array+0x24>
 8002e08:	4d0b      	ldr	r5, [pc, #44]	; (8002e38 <__libc_init_array+0x40>)
 8002e0a:	4c0c      	ldr	r4, [pc, #48]	; (8002e3c <__libc_init_array+0x44>)
 8002e0c:	f000 f818 	bl	8002e40 <_init>
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	2600      	movs	r6, #0
 8002e16:	42a6      	cmp	r6, r4
 8002e18:	d105      	bne.n	8002e26 <__libc_init_array+0x2e>
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e20:	4798      	blx	r3
 8002e22:	3601      	adds	r6, #1
 8002e24:	e7ee      	b.n	8002e04 <__libc_init_array+0xc>
 8002e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2a:	4798      	blx	r3
 8002e2c:	3601      	adds	r6, #1
 8002e2e:	e7f2      	b.n	8002e16 <__libc_init_array+0x1e>
 8002e30:	08002e98 	.word	0x08002e98
 8002e34:	08002e98 	.word	0x08002e98
 8002e38:	08002e98 	.word	0x08002e98
 8002e3c:	08002e9c 	.word	0x08002e9c

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
